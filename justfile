set dotenv-load := true
set positional-arguments := true

DATETIME := `TZ=UTC date '+%Y-%m-%d %H:%M:%S'`
STAGING := env('STAGING', 'crypto-2')
DOCKER_TAG := env('DOCKER_TAG', 'unknown/default')
BASE_IMAGE := env('BASE_IMAGE', 'python:3.12-slim-bookworm')

UV_INDEX_USERNAME := env('UV_INDEX_USERNAME', '__token__')
UV_INDEX_PASSWORD := env('UV_INDEX_PASSWORD', '')

default:
    @just --list

# (re)create clean and full-featured development environment from scratch with all required tools and packages
[group('environment')]
install:
    @mise trust --yes .mise.toml
    @mise install

# in-place autoformat sourcetree, destructive (!), after all also run `check`
[group('maintenance')]
lint: (_development_packages)
    @uv run --quiet \
    black \
        --quiet \
        --line-length 79 \
        --target-version py312 \
        'src/' 'tests/'

    @uv run --quiet \
    ruff check \
        --fix \
        --quiet \
        'src/' 'tests/'

    @uv run --quiet \
    pre-commit run \
        --config etc/pre-commit.yaml \
        --color always \
        --all

    @uv run --quiet \
    yamlfix \
        --config-file etc/lint/yamlfix.toml \
        --exclude '.cache/**/*.yml' \
        --exclude '.cache/**/*.yaml' \
        --exclude '.venv/**/*.yml' \
        --exclude '.venv/**/*.yaml' \
        .

    @uv run --quiet \
    yamllint \
        --format parsable \
        --config-file etc/lint/yamllint.yaml \
        .

    @make check

# non-destructive source files check, fast fail on errors
[group('maintenance')]
check: (_development_packages)
    @echo "check ruff.."
    @uv run --quiet \
    ruff check \
        --quiet \
        'src/' 'tests/'

    @echo "check mypy.."
    @uv run --quiet \
    mypy \
        --cache-fine-grained \
        --config-file etc/lint/mypy.toml \
        'src/' 'tests/'

    @echo "check vulture.."
    @uv run --quiet \
    vulture \
        --min-confidence 66 \
        'src/'

    @echo "check bandit.."
    @uv run --quiet \
    bandit \
        --quiet \
        --recursive \
        --severity-level all \
        --confidence-level all \
        --configfile pyproject.toml \
        'src/' 'tests/'

    @echo "check refurb.."
    @uv run --quiet \
    refurb \
        --quiet \
        --enable-all \
        --python-version 3.12 \
        --config-file pyproject.toml \
        --sort filename \
        'src/' 'tests/'

# make new database migration with autogenerated changes
[group('maintenance')]
migration description='':
    @uv run --quiet \
    alembic revision \
        --autogenerate \
        --message \
        "{{ if description == '' {DATETIME} else {description} }}"

# apply database migrations
[group('maintenance')]
migrate:
    @uv run --quiet \
    alembic upgrade head

# tests per se tests, with coverage report
[group('maintenance')]
test:
    @PYTHONASYNCIODEBUG=1 \
    uv run --quiet \
    pytest \
        -rs \
        -svvv \
        --cov app \
        --cov-report term-missing

# upgrade dependencies graph
[group('packaging')]
upgrade:
    @mise upgrade --quiet --yes
    @uv sync \
        --refresh \
        --upgrade \
        --group development

    @uv lock --upgrade
    @uv pip list

# build docker image
[group('packaging')]
dock:
    @uv lock --quiet
    docker buildx build --load \
        --build-arg BASE_IMAGE="{{BASE_IMAGE}}" \
        --build-arg UV_INDEX_USERNAME="{{UV_INDEX_USERNAME}}" \
        --build-arg UV_INDEX_PASSWORD="{{UV_INDEX_PASSWORD}}" \
        -t "{{DOCKER_TAG}}" .

# production method of running the application
[group('project')]
run:
    @uv run --quiet main.py

# development method of running the application
[group('project')]
develop:
    @CLIENTS_LOG_TEXTUAL=true uv run main.py

# forward ports from remote environment using kubefwd; don't forgot run `gcloud auth login`
[group('project')]
ports:
    @echo " -> forward ports to {{STAGING}} environment"
    @sudo kubefwd svc -n temporal -n utils -n zitadel -n {{STAGING}}

# add development packages to environment when skipped
[group('maintenance')]
_development_packages:
    @uv sync --quiet --group development
